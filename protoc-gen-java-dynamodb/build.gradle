plugins {
    id 'application'
    id 'maven-publish'
    id 'signing'
    id "com.diffplug.spotless" version "6.6.1"
}

repositories {
    mavenCentral()
}

def _version = '0.0.4'
version = _version

dependencies {
    implementation 'com.google.protobuf:protobuf-java:3.20.1'
    implementation 'com.salesforce.servicelibs:jprotoc:1.2.1'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'com.amazonaws:aws-java-sdk:1.12.220'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

application {
    mainClass = 'net.moznion.protoc.plugin.dynamodb.App'
}

java {
    sourceCompatibility = 11
    targetCompatibility = 11
    withJavadocJar()
    withSourcesJar()
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}

distributions {
    main {
        contents {
            from ('..') {
                include 'protos/*'
            }
        }
    }
}

distZip {
    into("${archiveBaseName}-${archiveVersion}/bin") {
        fileMode = 0755
    }
}

distTar {
    compression = Compression.GZIP
    archiveExtension = 'tar.gz'
}

spotless {
  java {
    googleJavaFormat('1.15.0')
    removeUnusedImports()
    target "**/*.java"
  }
}

publishing {
    publications {
        maven(MavenPublication) {
            group = "net.moznion"
            artifactId = "protoc-gen-java-dynamodb"
            version = _version
            from components.java
            pom {
                name = "protoc-gen-java-dynamodb"
                description = "A Protocol Buffers code generator plugin for Java that generates Amazon DynamoDB entity code according to the protoc schema."
                url = "https://github.com/moznion/protoc-gen-java-dynamodb"
                licenses {
                    license {
                        name = "The 3-Clause BSD License"
                        url = "https://opensource.org/licenses/BSD-3-Clause"
                    }
                }
                developers {
                    developer {
                        id = "moznion"
                        name = "Taiki Kawakami"
                        email = "moznion@mail.moznion.net"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/moznion/protoc-gen-java-dynamodb.git"
                    developerConnection = "scm:git:ssh://github.com/moznion/protoc-gen-java-dynamodb.git"
                    url = "https://github.com/moznion/protoc-gen-java-dynamodb"
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = findProperty("sonatypeUsername") ?: ""
                password = findProperty("sonatypePassword") ?: ""
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}

def devContainerName = 'protoc-gen-java-dynamodb:latest'

task buildDockerDevContainer(type: Exec) {
    workingDir '../'
    commandLine 'bash', '-c', "docker build -t ${devContainerName} -f devtools/Dockerfile ."
}

task gen(type: Exec) {
    workingDir '../'
    commandLine 'bash', '-c',
                "docker run -v \$(pwd):/protoc-gen-java-dynamodb -w /protoc-gen-java-dynamodb ${devContainerName} protoc --java_out=./protoc-gen-java-dynamodb/src/main/java/ ./protos/options.proto"
}

task copyDepsToLib(type: Copy) {
    into "${buildDir}/lib"
    from configurations.runtimeClasspath
}

task copyBuiltJarToLib(type: Copy) {
    dependsOn jar
    into "${buildDir}/lib"
    from "${buildDir}/libs"
}

task buildForTest() {
    dependsOn compileJava, processResources, classes, jar, startScripts, distTar, distZip, assemble,
              copyBuiltJarToLib, copyDepsToLib
}

task cleanTestGeneratedFiles(type: Exec) {
    workingDir '../'
    commandLine 'bash', '-c',
                "rm -f ./protoc-gen-java-dynamodb/src/test/java/net/moznion/protoc/plugin/dynamodb/generated/*"
}

task genTestProtos(type: Exec) {
    dependsOn buildForTest, cleanTestGeneratedFiles
    workingDir '../'
    commandLine 'bash', '-c',
                "docker run -v \$(pwd):/protoc-gen-java-dynamodb -w /protoc-gen-java-dynamodb ${devContainerName} protoc -I ./protoc-gen-java-dynamodb/src/test/resources/protos/ --java_out=./protoc-gen-java-dynamodb/src/test/java/ --plugin=protoc-gen-java-dynamodb=./protoc-gen-java-dynamodb/build/scripts/protoc-gen-java-dynamodb --java-dynamodb_out=./protoc-gen-java-dynamodb/src/test/java ./protoc-gen-java-dynamodb/src/test/resources/protos/*.proto"
}

task runDynamodbLocalContainer(type: Exec) {
    commandLine 'docker', 'run', '--rm', '-d', '-p', '38000:8000', 'amazon/dynamodb-local:latest'
}

task fmt {
  dependsOn spotlessApply
  finalizedBy gen, genTestProtos
}

